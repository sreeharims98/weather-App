{"version":3,"sources":["logo.png","WeatherComp.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Title","Typography","WeatherComp","city","country","temp","weather","iconId","className","src","alt","App","props","getWeather","a","fetch","state","cityName","response","json","data","console","log","setState","cod","fah","parseFloat","main","cel","parseInt","cityDisplay","name","sys","icon","onChangeHandler","e","target","value","onSubmitHandler","capitalizeFirstLetter","preventDefault","isWeatherCompTrue","style","color","marginTop","window","location","reload","string","charAt","toUpperCase","slice","height","width","onSubmit","this","placeholder","onChange","autoFocus","required","type","htmlType","Component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8ef9b584.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.fe225ce0.png\";","import React from \"react\";\r\n\r\nimport \"./App.css\";\r\nimport { Typography } from \"antd\";\r\nconst { Title } = Typography;\r\n\r\nconst WeatherComp = ({ city, country, temp, weather, iconId }) => {\r\n  return (\r\n    <div>\r\n      <Title className=\"title\">\r\n        {city}, {country}\r\n      </Title>\r\n      <img\r\n        src={`http://openweathermap.org/img/wn/${iconId}@4x.png`}\r\n        alt=\"not found\"\r\n      />\r\n      <Title className=\"weather\">{weather}</Title>\r\n      <Title className=\"degree\">{temp}&deg;C</Title>\r\n    </div>\r\n  );\r\n};\r\nexport default WeatherComp;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Button, Input, Typography } from \"antd\";\nimport WeatherComp from \"./WeatherComp\";\nimport \"./logo.png\";\n\nconst { Title } = Typography;\nconst API_key = \"6154816b7e72c68621e01071c3a2d0bc\";\n// api.openweathermap.org/data/2.5/weather?q={city name}&appid={your api key}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cityName: \"\",\n      cityDisplay: \"\",\n      country: \"\",\n      temp: \"\",\n      cod: \"\",\n      iconId: \"\",\n      icon: \"\",\n    };\n  }\n\n  getWeather = async () => {\n    const response = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=${this.state.cityName}&appid=${API_key}`\n    );\n    const data = await response.json();\n    console.log(data);\n    this.setState({ cod: data.cod });\n    const fah = parseFloat(data.main.temp);\n    const cel = parseInt(fah - 273.15);\n    this.setState({\n      cityDisplay: data.name,\n      country: data.sys.country,\n      temp: cel,\n      weather: data.weather[0].main,\n      iconId: data.weather[0].icon,\n      cityName: \"\",\n    });\n  };\n\n  onChangeHandler = (e) => {\n    this.setState({\n      cityName: e.target.value,\n    });\n  };\n\n  onSubmitHandler = (e) => {\n    this.setState({\n      cityName: this.capitalizeFirstLetter(this.state.cityName),\n    });\n    e.preventDefault();\n    //console.log(this.state.city);\n    this.getWeather();\n  };\n  capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  }\n\n  isWeatherCompTrue = () => {\n    if (this.state.cod === \"404\") {\n      return (\n        <div>\n          <h1 style={{ color: \"red\", marginTop: \"20px\" }}>\n            City Not Found....!!!!\n          </h1>\n          {window.location.reload(true)}\n        </div>\n      );\n    } else if (this.state.cod >= 1) {\n      return (\n        <WeatherComp\n          city={this.state.cityDisplay}\n          country={this.state.country}\n          temp={this.state.temp}\n          weather={this.state.weather}\n          iconId={this.state.iconId}\n        />\n      );\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"head\">\n          <Title className=\"\">\n            <span style={{ color: \"orange\" }}>Weather</span>{\" \"}\n            <img src=\"./logo.png\" alt=\"icon\" height=\"100px\" width=\"100px\" />{\" \"}\n            <span style={{ color: \"blue\" }}>Finder</span>\n          </Title>\n        </div>\n        <form onSubmit={this.onSubmitHandler}>\n          <Input\n            placeholder=\"Enter a City Name\"\n            className=\"input-city\"\n            value={this.state.cityName}\n            onChange={this.onChangeHandler}\n            autoFocus={true}\n            required\n          />\n          <Button type=\"primary\" className=\"btn\" htmlType=\"submit\">\n            Search\n          </Button>\n        </form>\n        {this.isWeatherCompTrue()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}